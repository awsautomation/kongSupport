{
  "version": 4,
  "terraform_version": "0.12.26",
  "serial": 8,
  "lineage": "000000000000081",
  "outputs": {},
  "resources": [
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_acm_certificate",
      "name": "admin-cert",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:acm:me-south-1:00000000000:certificate/c00000008a7",
            "domain": "privateDomain.com",
            "id": "2020-07-06 11:48:37.430006 +0000 UTC",
            "key_types": null,
            "most_recent": false,
            "statuses": null,
            "tags": {
              "name": "privateDomain.com"
            },
            "types": null
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_acm_certificate",
      "name": "external-cert",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:acm:me-south-1:00000000000:certificate/000000000008a7",
            "domain": "privateDomain.com",
            "id": "2020-07-06 11:48:37.367931 +0000 UTC",
            "key_types": null,
            "most_recent": false,
            "statuses": null,
            "tags": {
              "name": "privateDomain.com"
            },
            "types": null
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_acm_certificate",
      "name": "internal-cert",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:acm:me-south-1:000000000:certificate/c10000000000a7",
            "domain": "privateDomain.com",
            "id": "2020-07-06 11:48:37.367611 +0000 UTC",
            "key_types": null,
            "most_recent": false,
            "statuses": null,
            "tags": {
              "name": "privateDomain.com"
            },
            "types": null
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_acm_certificate",
      "name": "manager-cert",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:acm:me-south-1:00000000000:certificate/c100000000000008a7",
            "domain": "privateDomain.com",
            "id": "2020-07-06 11:48:37.424638 +0000 UTC",
            "key_types": null,
            "most_recent": false,
            "statuses": null,
            "tags": {
              "name": "privateDomain.com"
            },
            "types": null
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_acm_certificate",
      "name": "portal-cert",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:acm:me-south-1:00000000000000:certificate/c1ce0000000008a7",
            "domain": "privateDomain.com",
            "id": "2020-07-06 11:48:37.429858 +0000 UTC",
            "key_types": null,
            "most_recent": false,
            "statuses": null,
            "tags": {
              "name": "privateDomain.com"
            },
            "types": null
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "0000000000",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      }\n    }\n  ]\n}",
            "override_json": null,
            "policy_id": null,
            "source_json": null,
            "statement": [
              {
                "actions": [
                  "sts:AssumeRole"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [
                  {
                    "identifiers": [
                      "ec2.amazonaws.com"
                    ],
                    "type": "Service"
                  }
                ],
                "resources": [],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "kong-ssm",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "00000000000",
            "json": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ssm:DescribeParameters\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ssm:GetParameter\",\n      \"Resource\": \"arn:aws:ssm:*:*:parameter/kong/build/*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"kms:Decrypt\",\n      \"Resource\": \"arn:aws:kms:me-south-1:0000000000000:key/665120000000000c6577a1\"\n    }\n  ]\n}",
            "override_json": null,
            "policy_id": null,
            "source_json": null,
            "statement": [
              {
                "actions": [
                  "ssm:DescribeParameters"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "*"
                ],
                "sid": ""
              },
              {
                "actions": [
                  "ssm:GetParameter"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:ssm:*:*:parameter/kong/build/*"
                ],
                "sid": ""
              },
              {
                "actions": [
                  "kms:Decrypt"
                ],
                "condition": [],
                "effect": "Allow",
                "not_actions": [],
                "not_principals": [],
                "not_resources": [],
                "principals": [],
                "resources": [
                  "arn:aws:kms:me-south-1:0000000000000000:key/665100000000e7c6577a1"
                ],
                "sid": ""
              }
            ],
            "version": "2012-10-17"
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_region",
      "name": "current",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "current": null,
            "description": "Middle East (Bahrain)",
            "endpoint": "ec2.me-south-1.amazonaws.com",
            "id": "me-south-1",
            "name": "me-south-1"
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_security_group",
      "name": "default",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:me-south-1:000000000000:security-group/sg-0000000000",
            "description": "SecurityGroup-RDS-PostGre-AZ1",
            "filter": null,
            "id": "sg-00000000000",
            "name": "sg7-rds-az1",
            "tags": {
              "Name": "s-rds-az1"
            },
            "vpc_id": "vpc-000000000000"
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_subnet_ids",
      "name": "private",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filter": [
              {
                "name": "tag:Tier",
                "values": [
                  "private"
                ]
              }
            ],
            "id": "vpc-0000000000000",
            "ids": [
              "subnet-040000000000",
              "subnet-000000000000"
            ],
            "tags": null,
            "vpc_id": "vpc-033000000000000"
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_subnet_ids",
      "name": "public",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filter": [
              {
                "name": "tag:Tier",
                "values": [
                  "public"
                ]
              }
            ],
            "id": "vpc-00000000000000e",
            "ids": [
              "subnet-000000000000000",
              "subnet-00000000000000"
            ],
            "tags": null,
            "vpc_id": "vpc-030000000000"
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "aws_vpc",
      "name": "vpc",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:me-south-1:000000000000:vpc/vpc-03000000000000",
            "cidr_block": "10.139.0.0/19",
            "cidr_block_associations": [
              {
                "association_id": "vpc-cidr-assoc-0000000000000",
                "cidr_block": "10.139.0.0/19",
                "state": "associated"
              }
            ],
            "default": false,
            "dhcp_options_id": "dopt-e00000000",
            "enable_dns_hostnames": true,
            "enable_dns_support": true,
            "filter": null,
            "id": "vpc-03300000000",
            "instance_tenancy": "default",
            "ipv6_association_id": null,
            "ipv6_cidr_block": null,
            "main_route_table_id": "rtb-0200000000f2e",
            "owner_id": "0000000000",
            "state": "available",
            "tags": {
              "Name": "kong-UAT",
              "kubernetes.io/cluster/AWSconf-KongEnterprise-UAT": "shared"
            }
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "template_cloudinit_config",
      "name": "cloud-init",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": true,
            "gzip": true,
            "id": "190000000246",
            "part": [
              {
                "content": "#cloud-config\n\n# Create kong system user and group\ngroups:\n  - kong\n\nusers:\n  - default\n  - name: kong\n    lock_passwd: true\n    primary-group: kong\n    homedir: /usr/local/kong\n    no-create-home: true\n    shell: /bin/bash\n    system: true\n\nwrite_files:\n  - path: /etc/apt/apt.conf.d/00InstallRecommends\n    owner: root:root\n    permissions: '0644'\n    content: |\n      APT::Install-Recommends \"false\";\n\n# Package configuration\napt:\n  primary:\n    - arches: [default]\n\napt_update: true\npackage_upgrade: true\npackages:\n  - apt-listchanges\n  - unattended-upgrades\n  - ntp\n  - runit\n  - runit-systemd\n  - dnsutils\n  - curl\n  - telnet\n  - pwgen\n  - postgresql-client\n  - perl\n  - libpcre3\n  - awscli\n",
                "content_type": "text/cloud-config",
                "filename": "init.cfg",
                "merge_type": ""
              },
              {
                "content": "#!/bin/sh\n\n# Function to grab SSM parameters\naws_get_parameter() {\n    aws ssm --region me-south-1 get-parameter \\\n        --name \"/kong/build/$1\" \\\n        --with-decryption \\\n        --output text \\\n        --query Parameter.Value 2\u003e/dev/null\n}\n\n# Enable auto updates\necho \"Enabling auto updates\"\necho unattended-upgrades unattended-upgrades/enable_auto_updates boolean true \\\n    | debconf-set-selections\ndpkg-reconfigure -f noninteractive unattended-upgrades\n\n# Installing decK\n# https://github.com/hbagdi/deck\ncurl -sL https://github.com/hbagdi/deck/releases/download/v1.0.0/deck_1.0.0_linux_amd64.tar.gz \\\n    -o deck.tar.gz\ntar zxf deck.tar.gz deck\nsudo mv deck /usr/local/bin\nsudo chown root:kong /usr/local/bin/deck\nsudo chmod 755 /usr/local/bin/deck\n\n# Install Kong\necho \"Installing Kong\"\nEE_LICENSE=$(aws_get_parameter ee/license)\nEE_CREDS=$(aws_get_parameter ee/bintray-auth)\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    curl -sL https://kong.bintray.com/kong-enterprise-edition-deb/dists/kong-enterprise-edition-1.3.0.1.bionic.all.deb  \\\n        -u $EE_CREDS \\\n        -o kong-enterprise-edition-1.3.0.1.bionic.all.deb  \n\n    if [ ! -f kong-enterprise-edition-1.3.0.1.bionic.all.deb  ]; then\n        echo \"Error: Enterprise edition download failed, aborting.\"\n        exit 1\n    fi\n    dpkg -i kong-enterprise-edition-1.3.0.1.bionic.all.deb \n\n    cat \u003c\u003cEOF \u003e /etc/kong/license.json\n$EE_LICENSE\nEOF\n    chown root:kong /etc/kong/license.json\n    chmod 640 /etc/kong/license.json\nelse  \n    curl -sL \"https://bintray.com/kong/kong-deb/download_file?file_path=kong-1.5.0.bionic.amd64.deb\" \\\n        -o kong-1.5.0.bionic.amd64.deb\n    dpkg -i kong-1.5.0.bionic.amd64.deb\nfi\n\n# Setup database\necho \"Setting up Kong database\"\nPGPASSWORD=$(aws_get_parameter \"db/password/master\")\nDB_HOST=$(aws_get_parameter \"db/host\")\nDB_NAME=$(aws_get_parameter \"db/name\")\nDB_PASSWORD=$(aws_get_parameter \"db/password\")\nexport PGPASSWORD\n\nRESULT=$(psql --host $DB_HOST --username root \\\n    --tuples-only --no-align postgres \\\n    \u003c\u003cEOF\nSELECT 1 FROM pg_roles WHERE rolname='kong_build'\nEOF\n)\n\nif [ $? != 0 ]; then\n    echo \"Error: Database connection failed, please configure manually\"\n    exit 1\nfi\n\necho $RESULT | grep -q 1\nif [ $? != 0 ]; then\n    psql --host $DB_HOST --username root postgres \u003c\u003cEOF\nCREATE USER kong_build WITH PASSWORD '$DB_PASSWORD';\nGRANT kong_build TO root;\nCREATE DATABASE $DB_NAME OWNER = kong_build;\nEOF\nfi\nunset PGPASSWORD\n\n# Setup Configuration file\ncat \u003c\u003cEOF \u003e /etc/kong/kong.conf\n# kong.conf, Kong configuration file\n# Written by Dennis Kelly \u003cdennisk@zillowgroup.com\u003e\n# Updated by Dennis Kelly \u003cdennis.kelly@konghq.com\u003e\n#\n# 2020-01-23: Support for EE Kong Manager Auth\n# 2019-09-30: Support for 1.x releases and Dev Portal\n# 2018-03-13: Support for 0.12 and load balancing\n# 2017-06-20: Initial release\n#\n# Notes:\n#   - See kong.conf.default for further information\n\n# Database settings\ndatabase = postgres \npg_host = $DB_HOST\npg_user = kong_build\npg_password = $DB_PASSWORD\npg_database = $DB_NAME\n\n# Load balancer headers\nreal_ip_header = X-Forwarded-For\ntrusted_ips = 0.0.0.0/0\n\n# SSL terminiation is performed by load balancers\nproxy_listen = 0.0.0.0:8000\n# For /status to load balancers\nadmin_listen = 0.0.0.0:8001\nEOF\nchmod 640 /etc/kong/kong.conf\nchgrp kong /etc/kong/kong.conf\n\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    cat \u003c\u003cEOF \u003e\u003e /etc/kong/kong.conf\n\n# Enterprise Edition Settings\n# SSL terminiation is performed by load balancers\nadmin_gui_listen  = 0.0.0.0:8002\nportal_gui_listen = 0.0.0.0:8003\nportal_api_listen = 0.0.0.0:8004\n\nadmin_api_uri = https://internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8444\nadmin_gui_url = https://internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8445\n\nportal              = on\nportal_gui_protocol = https\nportal_gui_host     = internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8446\nportal_api_url      = http://internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8447\nportal_cors_origins = https://internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8446, https://internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8447\n\nvitals = on\nEOF\n\n    for DIR in gui lib portal; do\n        chown -R kong:kong /usr/local/kong/$DIR\n    done\nelse\n    # CE does not create the kong directory\n    mkdir /usr/local/kong\nfi\n\nchown root:kong /usr/local/kong\nchmod 2775 /usr/local/kong\n\n# Initialize Kong\necho \"Initializing Kong\"\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    ADMIN_TOKEN=$(aws_get_parameter \"ee/admin/token\")\n    sudo -u kong KONG_PASSWORD=$ADMIN_TOKEN kong migrations bootstrap\nelse \n    sudo -u kong kong migrations bootstrap\nfi\n\ncat \u003c\u003c'EOF' \u003e /usr/local/kong/nginx.conf\nworker_processes auto;\ndaemon off;\n\npid pids/nginx.pid;\nerror_log logs/error.log notice;\n\nworker_rlimit_nofile 65536;\n\nevents {\n    worker_connections 8192;\n    multi_accept on;\n}\n\nhttp {\n    include nginx-kong.conf;\n}\nEOF\nchown root:kong /usr/local/kong/nginx.conf\n\n# Log rotation\ncat \u003c\u003c'EOF' \u003e /etc/logrotate.d/kong\n/usr/local/kong/logs/*.log {\n  rotate 14\n  daily\n  compress\n  missingok\n  notifempty\n  create 640 kong kong\n  sharedscripts\n\n  postrotate\n    /usr/bin/sv 1 /etc/sv/kong\n  endscript\n}\nEOF\n\n# Start Kong under supervision\necho \"Starting Kong under supervision\"\nmkdir -p /etc/sv/kong /etc/sv/kong/log\n\ncat \u003c\u003c'EOF' \u003e /etc/sv/kong/run\n#!/bin/sh -e\nexec 2\u003e\u00261\n\nulimit -n 65536\nsudo -u kong kong prepare\nexec chpst -u kong /usr/local/openresty/nginx/sbin/nginx -p /usr/local/kong -c nginx.conf\nEOF\n\ncat \u003c\u003c'EOF' \u003e /etc/sv/kong/log/run\n#!/bin/sh -e\n\n[ -d /var/log/kong ] || mkdir -p /var/log/kong\nchown kong:kong /var/log/kong\n\nexec chpst -u kong /usr/bin/svlogd -tt /var/log/kong\nEOF\nchmod 744 /etc/sv/kong/run /etc/sv/kong/log/run\n\ncd /etc/service\nln -s /etc/sv/kong\n\n# Verify Admin API is up\nRUNNING=0\nfor I in 1 2 3 4 5 6 7 8 9; do\n    curl -s -I http://localhost:8001/status | grep -q \"200 OK\"\n    if [ $? = 0 ]; then\n        RUNNING=1\n        break\n    fi\n    sleep 1\ndone\n\nif [ $RUNNING = 0 ]; then\n    echo \"Cannot connect to admin API, avoiding further configuration.\"\n    exit 1\nfi\n\n# Enable healthchecks using a kong endpoint\ncurl -s -I http://localhost:8000/status | grep -q \"200 OK\"\nif [ $? != 0 ]; then\n    echo \"Configuring healthcheck\"\n    curl -s -X POST http://localhost:8001/services \\\n        -d name=status \\\n        -d host=localhost \\\n        -d port=8001 \\\n        -d path=/status \u003e /dev/null\n    curl -s -X POST http://localhost:8001/services/status/routes \\\n        -d name=status \\\n        -d 'methods[]=HEAD' \\\n        -d 'methods[]=GET' \\\n        -d 'paths[]=/status' \u003e /dev/null\n    curl -s -X POST http://localhost:8001/services/status/plugins \\\n        -d name=ip-restriction \\\n        -d \"config.whitelist=127.0.0.1\" \\\n        -d \"config.whitelist=10.139.0.0/19\" \u003e /dev/null\nfi\n\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    echo \"Configuring enterprise edition settings\"\n    \n    # Monitor role, endpoints, user, for healthcheck\n    curl -s -X GET -I http://localhost:8001/rbac/roles/monitor | grep -q \"200 OK\"\n    if [ $? != 0 ]; then\n        COMMENT=\"Load balancer access to /status\"\n\n        curl -s -X POST http://localhost:8001/rbac/roles \\\n            -d name=monitor \\\n            -d comment=\"$COMMENT\" \u003e /dev/null\n        curl -s -X POST http://localhost:8001/rbac/roles/monitor/endpoints \\\n            -d endpoint=/status -d actions=read \\\n            -d comment=\"$COMMENT\" \u003e /dev/null\n        curl -s -X POST http://localhost:8001/rbac/users \\\n            -d name=monitor -d user_token=monitor \\\n            -d comment=\"$COMMENT\" \u003e /dev/null\n        curl -s -X POST http://localhost:8001/rbac/users/monitor/roles \\\n            -d roles=monitor \u003e /dev/null\n\n        # Add authentication token for /status\n        curl -s -X POST http://localhost:8001/services/status/plugins \\\n            -d name=request-transformer \\\n            -d 'config.add.headers[]=Kong-Admin-Token:monitor' \u003e /dev/null\n    fi\n\n    sv stop /etc/sv/kong\n    cat \u003c\u003cEOF \u003e\u003e /etc/kong/kong.conf\nenforce_rbac = on\nadmin_gui_auth = basic-auth\nadmin_gui_session_conf = { \"secret\":\"qgzqjDnC4fF0DUuNuZGOWbu8EHxf2sOp\", \"cookie_secure\":false }\nEOF\n\n    sv start /etc/sv/kong     \nfi\n",
                "content_type": "text/x-shellscript",
                "filename": "",
                "merge_type": ""
              }
            ],
            "rendered": "H4sIAAAAAAAA/7xa/1MbuZL/XVX5H3oH6ni5im/9y00000000000000000A=="
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "template_file",
      "name": "cloud-init",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "00000000000000",
            "rendered": "#cloud-config\n\n# Create kong system user and group\ngroups:\n  - kong\n\nusers:\n  - default\n  - name: kong\n    lock_passwd: true\n    primary-group: kong\n    homedir: /usr/local/kong\n    no-create-home: true\n    shell: /bin/bash\n    system: true\n\nwrite_files:\n  - path: /etc/apt/apt.conf.d/00InstallRecommends\n    owner: root:root\n    permissions: '0644'\n    content: |\n      APT::Install-Recommends \"false\";\n\n# Package configuration\napt:\n  primary:\n    - arches: [default]\n\napt_update: true\npackage_upgrade: true\npackages:\n  - apt-listchanges\n  - unattended-upgrades\n  - ntp\n  - runit\n  - runit-systemd\n  - dnsutils\n  - curl\n  - telnet\n  - pwgen\n  - postgresql-client\n  - perl\n  - libpcre3\n  - awscli\n",
            "template": "#cloud-config\n\n# Create kong system user and group\ngroups:\n  - kong\n\nusers:\n  - default\n  - name: kong\n    lock_passwd: true\n    primary-group: kong\n    homedir: /usr/local/kong\n    no-create-home: true\n    shell: /bin/bash\n    system: true\n\nwrite_files:\n  - path: /etc/apt/apt.conf.d/00InstallRecommends\n    owner: root:root\n    permissions: '0644'\n    content: |\n      APT::Install-Recommends \"false\";\n\n# Package configuration\napt:\n  primary:\n    - arches: [default]\n\napt_update: true\npackage_upgrade: true\npackages:\n  - apt-listchanges\n  - unattended-upgrades\n  - ntp\n  - runit\n  - runit-systemd\n  - dnsutils\n  - curl\n  - telnet\n  - pwgen\n  - postgresql-client\n  - perl\n  - libpcre3\n  - awscli\n",
            "vars": null
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "data",
      "type": "template_file",
      "name": "shell-script",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "3000000000c",
            "rendered": "#!/bin/sh\n\n# Function to grab SSM parameters\naws_get_parameter() {\n    aws ssm --region me-south-1 get-parameter \\\n        --name \"/kong/build/$1\" \\\n        --with-decryption \\\n        --output text \\\n        --query Parameter.Value 2\u003e/dev/null\n}\n\n# Enable auto updates\necho \"Enabling auto updates\"\necho unattended-upgrades unattended-upgrades/enable_auto_updates boolean true \\\n    | debconf-set-selections\ndpkg-reconfigure -f noninteractive unattended-upgrades\n\n# Installing decK\n# https://github.com/hbagdi/deck\ncurl -sL https://github.com/hbagdi/deck/releases/download/v1.0.0/deck_1.0.0_linux_amd64.tar.gz \\\n    -o deck.tar.gz\ntar zxf deck.tar.gz deck\nsudo mv deck /usr/local/bin\nsudo chown root:kong /usr/local/bin/deck\nsudo chmod 755 /usr/local/bin/deck\n\n# Install Kong\necho \"Installing Kong\"\nEE_LICENSE=$(aws_get_parameter ee/license)\nEE_CREDS=$(aws_get_parameter ee/bintray-auth)\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    curl -sL https://kong.bintray.com/kong-enterprise-edition-deb/dists/kong-enterprise-edition-1.3.0.1.bionic.all.deb  \\\n        -u $EE_CREDS \\\n        -o kong-enterprise-edition-1.3.0.1.bionic.all.deb  \n\n    if [ ! -f kong-enterprise-edition-1.3.0.1.bionic.all.deb  ]; then\n        echo \"Error: Enterprise edition download failed, aborting.\"\n        exit 1\n    fi\n    dpkg -i kong-enterprise-edition-1.3.0.1.bionic.all.deb \n\n    cat \u003c\u003cEOF \u003e /etc/kong/license.json\n$EE_LICENSE\nEOF\n    chown root:kong /etc/kong/license.json\n    chmod 640 /etc/kong/license.json\nelse  \n    curl -sL \"https://bintray.com/kong/kong-deb/download_file?file_path=kong-1.5.0.bionic.amd64.deb\" \\\n        -o kong-1.5.0.bionic.amd64.deb\n    dpkg -i kong-1.5.0.bionic.amd64.deb\nfi\n\n# Setup database\necho \"Setting up Kong database\"\nPGPASSWORD=$(aws_get_parameter \"db/password/master\")\nDB_HOST=$(aws_get_parameter \"db/host\")\nDB_NAME=$(aws_get_parameter \"db/name\")\nDB_PASSWORD=$(aws_get_parameter \"db/password\")\nexport PGPASSWORD\n\nRESULT=$(psql --host $DB_HOST --username root \\\n    --tuples-only --no-align postgres \\\n    \u003c\u003cEOF\nSELECT 1 FROM pg_roles WHERE rolname='kong_build'\nEOF\n)\n\nif [ $? != 0 ]; then\n    echo \"Error: Database connection failed, please configure manually\"\n    exit 1\nfi\n\necho $RESULT | grep -q 1\nif [ $? != 0 ]; then\n    psql --host $DB_HOST --username root postgres \u003c\u003cEOF\nCREATE USER kong_build WITH PASSWORD '$DB_PASSWORD';\nGRANT kong_build TO root;\nCREATE DATABASE $DB_NAME OWNER = kong_build;\nEOF\nfi\nunset PGPASSWORD\n\n# Setup Configuration file\ncat \u003c\u003cEOF \u003e /etc/kong/kong.conf\n# kong.conf, Kong configuration file\n# Written by Dennis Kelly \u003cdennisk@zillowgroup.com\u003e\n# Updated by Dennis Kelly \u003cdennis.kelly@konghq.com\u003e\n#\n# 2020-01-23: Support for EE Kong Manager Auth\n# 2019-09-30: Support for 1.x releases and Dev Portal\n# 2018-03-13: Support for 0.12 and load balancing\n# 2017-06-20: Initial release\n#\n# Notes:\n#   - See kong.conf.default for further information\n\n# Database settings\ndatabase = postgres \npg_host = $DB_HOST\npg_user = kong_build\npg_password = $DB_PASSWORD\npg_database = $DB_NAME\n\n# Load balancer headers\nreal_ip_header = X-Forwarded-For\ntrusted_ips = 0.0.0.0/0\n\n# SSL terminiation is performed by load balancers\nproxy_listen = 0.0.0.0:8000\n# For /status to load balancers\nadmin_listen = 0.0.0.0:8001\nEOF\nchmod 640 /etc/kong/kong.conf\nchgrp kong /etc/kong/kong.conf\n\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    cat \u003c\u003cEOF \u003e\u003e /etc/kong/kong.conf\n\n# Enterprise Edition Settings\n# SSL terminiation is performed by load balancers\nadmin_gui_listen  = 0.0.0.0:8002\nportal_gui_listen = 0.0.0.0:8003\nportal_api_listen = 0.0.0.0:8004\n\nadmin_api_uri = https://internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8444\nadmin_gui_url = https://internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8445\n\nportal              = on\nportal_gui_protocol = https\nportal_gui_host     = internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8446\nportal_api_url      = http://internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8447\nportal_cors_origins = https://internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8446, https://internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com:8447\n\nvitals = on\nEOF\n\n    for DIR in gui lib portal; do\n        chown -R kong:kong /usr/local/kong/$DIR\n    done\nelse\n    # CE does not create the kong directory\n    mkdir /usr/local/kong\nfi\n\nchown root:kong /usr/local/kong\nchmod 2775 /usr/local/kong\n\n# Initialize Kong\necho \"Initializing Kong\"\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    ADMIN_TOKEN=$(aws_get_parameter \"ee/admin/token\")\n    sudo -u kong KONG_PASSWORD=$ADMIN_TOKEN kong migrations bootstrap\nelse \n    sudo -u kong kong migrations bootstrap\nfi\n\ncat \u003c\u003c'EOF' \u003e /usr/local/kong/nginx.conf\nworker_processes auto;\ndaemon off;\n\npid pids/nginx.pid;\nerror_log logs/error.log notice;\n\nworker_rlimit_nofile 65536;\n\nevents {\n    worker_connections 8192;\n    multi_accept on;\n}\n\nhttp {\n    include nginx-kong.conf;\n}\nEOF\nchown root:kong /usr/local/kong/nginx.conf\n\n# Log rotation\ncat \u003c\u003c'EOF' \u003e /etc/logrotate.d/kong\n/usr/local/kong/logs/*.log {\n  rotate 14\n  daily\n  compress\n  missingok\n  notifempty\n  create 640 kong kong\n  sharedscripts\n\n  postrotate\n    /usr/bin/sv 1 /etc/sv/kong\n  endscript\n}\nEOF\n\n# Start Kong under supervision\necho \"Starting Kong under supervision\"\nmkdir -p /etc/sv/kong /etc/sv/kong/log\n\ncat \u003c\u003c'EOF' \u003e /etc/sv/kong/run\n#!/bin/sh -e\nexec 2\u003e\u00261\n\nulimit -n 65536\nsudo -u kong kong prepare\nexec chpst -u kong /usr/local/openresty/nginx/sbin/nginx -p /usr/local/kong -c nginx.conf\nEOF\n\ncat \u003c\u003c'EOF' \u003e /etc/sv/kong/log/run\n#!/bin/sh -e\n\n[ -d /var/log/kong ] || mkdir -p /var/log/kong\nchown kong:kong /var/log/kong\n\nexec chpst -u kong /usr/bin/svlogd -tt /var/log/kong\nEOF\nchmod 744 /etc/sv/kong/run /etc/sv/kong/log/run\n\ncd /etc/service\nln -s /etc/sv/kong\n\n# Verify Admin API is up\nRUNNING=0\nfor I in 1 2 3 4 5 6 7 8 9; do\n    curl -s -I http://localhost:8001/status | grep -q \"200 OK\"\n    if [ $? = 0 ]; then\n        RUNNING=1\n        break\n    fi\n    sleep 1\ndone\n\nif [ $RUNNING = 0 ]; then\n    echo \"Cannot connect to admin API, avoiding further configuration.\"\n    exit 1\nfi\n\n# Enable healthchecks using a kong endpoint\ncurl -s -I http://localhost:8000/status | grep -q \"200 OK\"\nif [ $? != 0 ]; then\n    echo \"Configuring healthcheck\"\n    curl -s -X POST http://localhost:8001/services \\\n        -d name=status \\\n        -d host=localhost \\\n        -d port=8001 \\\n        -d path=/status \u003e /dev/null\n    curl -s -X POST http://localhost:8001/services/status/routes \\\n        -d name=status \\\n        -d 'methods[]=HEAD' \\\n        -d 'methods[]=GET' \\\n        -d 'paths[]=/status' \u003e /dev/null\n    curl -s -X POST http://localhost:8001/services/status/plugins \\\n        -d name=ip-restriction \\\n        -d \"config.whitelist=127.0.0.1\" \\\n        -d \"config.whitelist=10.139.0.0/19\" \u003e /dev/null\nfi\n\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    echo \"Configuring enterprise edition settings\"\n    \n    # Monitor role, endpoints, user, for healthcheck\n    curl -s -X GET -I http://localhost:8001/rbac/roles/monitor | grep -q \"200 OK\"\n    if [ $? != 0 ]; then\n        COMMENT=\"Load balancer access to /status\"\n\n        curl -s -X POST http://localhost:8001/rbac/roles \\\n            -d name=monitor \\\n            -d comment=\"$COMMENT\" \u003e /dev/null\n        curl -s -X POST http://localhost:8001/rbac/roles/monitor/endpoints \\\n            -d endpoint=/status -d actions=read \\\n            -d comment=\"$COMMENT\" \u003e /dev/null\n        curl -s -X POST http://localhost:8001/rbac/users \\\n            -d name=monitor -d user_token=monitor \\\n            -d comment=\"$COMMENT\" \u003e /dev/null\n        curl -s -X POST http://localhost:8001/rbac/users/monitor/roles \\\n            -d roles=monitor \u003e /dev/null\n\n        # Add authentication token for /status\n        curl -s -X POST http://localhost:8001/services/status/plugins \\\n            -d name=request-transformer \\\n            -d 'config.add.headers[]=Kong-Admin-Token:monitor' \u003e /dev/null\n    fi\n\n    sv stop /etc/sv/kong\n    cat \u003c\u003cEOF \u003e\u003e /etc/kong/kong.conf\nenforce_rbac = on\nadmin_gui_auth = basic-auth\nadmin_gui_session_conf = { \"secret\":\"qgzqjDnC4fF0DUuNuZGOWbu8EHxf2sOp\", \"cookie_secure\":false }\nEOF\n\n    sv start /etc/sv/kong     \nfi\n",
            "template": "#!/bin/sh\n\n# Function to grab SSM parameters\naws_get_parameter() {\n    aws ssm --region ${REGION} get-parameter \\\n        --name \"${PARAMETER_PATH}/$1\" \\\n        --with-decryption \\\n        --output text \\\n        --query Parameter.Value 2\u003e/dev/null\n}\n\n# Enable auto updates\necho \"Enabling auto updates\"\necho unattended-upgrades unattended-upgrades/enable_auto_updates boolean true \\\n    | debconf-set-selections\ndpkg-reconfigure -f noninteractive unattended-upgrades\n\n# Installing decK\n# https://github.com/hbagdi/deck\ncurl -sL https://github.com/hbagdi/deck/releases/download/v${DECK_VERSION}/deck_${DECK_VERSION}_linux_amd64.tar.gz \\\n    -o deck.tar.gz\ntar zxf deck.tar.gz deck\nsudo mv deck /usr/local/bin\nsudo chown root:kong /usr/local/bin/deck\nsudo chmod 755 /usr/local/bin/deck\n\n# Install Kong\necho \"Installing Kong\"\nEE_LICENSE=$(aws_get_parameter ee/license)\nEE_CREDS=$(aws_get_parameter ee/bintray-auth)\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    curl -sL https://kong.bintray.com/kong-enterprise-edition-deb/dists/${EE_PKG} \\\n        -u $EE_CREDS \\\n        -o ${EE_PKG} \n\n    if [ ! -f ${EE_PKG} ]; then\n        echo \"Error: Enterprise edition download failed, aborting.\"\n        exit 1\n    fi\n    dpkg -i ${EE_PKG}\n\n    cat \u003c\u003cEOF \u003e /etc/kong/license.json\n$EE_LICENSE\nEOF\n    chown root:kong /etc/kong/license.json\n    chmod 640 /etc/kong/license.json\nelse  \n    curl -sL \"https://bintray.com/kong/kong-deb/download_file?file_path=${CE_PKG}\" \\\n        -o ${CE_PKG}\n    dpkg -i ${CE_PKG}\nfi\n\n# Setup database\necho \"Setting up Kong database\"\nPGPASSWORD=$(aws_get_parameter \"db/password/master\")\nDB_HOST=$(aws_get_parameter \"db/host\")\nDB_NAME=$(aws_get_parameter \"db/name\")\nDB_PASSWORD=$(aws_get_parameter \"db/password\")\nexport PGPASSWORD\n\nRESULT=$(psql --host $DB_HOST --username root \\\n    --tuples-only --no-align postgres \\\n    \u003c\u003cEOF\nSELECT 1 FROM pg_roles WHERE rolname='${DB_USER}'\nEOF\n)\n\nif [ $? != 0 ]; then\n    echo \"Error: Database connection failed, please configure manually\"\n    exit 1\nfi\n\necho $RESULT | grep -q 1\nif [ $? != 0 ]; then\n    psql --host $DB_HOST --username root postgres \u003c\u003cEOF\nCREATE USER ${DB_USER} WITH PASSWORD '$DB_PASSWORD';\nGRANT ${DB_USER} TO root;\nCREATE DATABASE $DB_NAME OWNER = ${DB_USER};\nEOF\nfi\nunset PGPASSWORD\n\n# Setup Configuration file\ncat \u003c\u003cEOF \u003e /etc/kong/kong.conf\n# kong.conf, Kong configuration file\n# Written by Dennis Kelly \u003cdennisk@zillowgroup.com\u003e\n# Updated by Dennis Kelly \u003cdennis.kelly@konghq.com\u003e\n#\n# 2020-01-23: Support for EE Kong Manager Auth\n# 2019-09-30: Support for 1.x releases and Dev Portal\n# 2018-03-13: Support for 0.12 and load balancing\n# 2017-06-20: Initial release\n#\n# Notes:\n#   - See kong.conf.default for further information\n\n# Database settings\ndatabase = postgres \npg_host = $DB_HOST\npg_user = ${DB_USER}\npg_password = $DB_PASSWORD\npg_database = $DB_NAME\n\n# Load balancer headers\nreal_ip_header = X-Forwarded-For\ntrusted_ips = 0.0.0.0/0\n\n# SSL terminiation is performed by load balancers\nproxy_listen = 0.0.0.0:8000\n# For /status to load balancers\nadmin_listen = 0.0.0.0:8001\nEOF\nchmod 640 /etc/kong/kong.conf\nchgrp kong /etc/kong/kong.conf\n\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    cat \u003c\u003cEOF \u003e\u003e /etc/kong/kong.conf\n\n# Enterprise Edition Settings\n# SSL terminiation is performed by load balancers\nadmin_gui_listen  = 0.0.0.0:8002\nportal_gui_listen = 0.0.0.0:8003\nportal_api_listen = 0.0.0.0:8004\n\nadmin_api_uri = https://${MANAGER_HOST}:8444\nadmin_gui_url = https://${MANAGER_HOST}:8445\n\nportal              = on\nportal_gui_protocol = https\nportal_gui_host     = ${PORTAL_HOST}:8446\nportal_api_url      = http://${PORTAL_HOST}:8447\nportal_cors_origins = https://${PORTAL_HOST}:8446, https://${PORTAL_HOST}:8447\n\nvitals = on\nEOF\n\n    for DIR in gui lib portal; do\n        chown -R kong:kong /usr/local/kong/$DIR\n    done\nelse\n    # CE does not create the kong directory\n    mkdir /usr/local/kong\nfi\n\nchown root:kong /usr/local/kong\nchmod 2775 /usr/local/kong\n\n# Initialize Kong\necho \"Initializing Kong\"\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    ADMIN_TOKEN=$(aws_get_parameter \"ee/admin/token\")\n    sudo -u kong KONG_PASSWORD=$ADMIN_TOKEN kong migrations bootstrap\nelse \n    sudo -u kong kong migrations bootstrap\nfi\n\ncat \u003c\u003c'EOF' \u003e /usr/local/kong/nginx.conf\nworker_processes auto;\ndaemon off;\n\npid pids/nginx.pid;\nerror_log logs/error.log notice;\n\nworker_rlimit_nofile 65536;\n\nevents {\n    worker_connections 8192;\n    multi_accept on;\n}\n\nhttp {\n    include nginx-kong.conf;\n}\nEOF\nchown root:kong /usr/local/kong/nginx.conf\n\n# Log rotation\ncat \u003c\u003c'EOF' \u003e /etc/logrotate.d/kong\n/usr/local/kong/logs/*.log {\n  rotate 14\n  daily\n  compress\n  missingok\n  notifempty\n  create 640 kong kong\n  sharedscripts\n\n  postrotate\n    /usr/bin/sv 1 /etc/sv/kong\n  endscript\n}\nEOF\n\n# Start Kong under supervision\necho \"Starting Kong under supervision\"\nmkdir -p /etc/sv/kong /etc/sv/kong/log\n\ncat \u003c\u003c'EOF' \u003e /etc/sv/kong/run\n#!/bin/sh -e\nexec 2\u003e\u00261\n\nulimit -n 65536\nsudo -u kong kong prepare\nexec chpst -u kong /usr/local/openresty/nginx/sbin/nginx -p /usr/local/kong -c nginx.conf\nEOF\n\ncat \u003c\u003c'EOF' \u003e /etc/sv/kong/log/run\n#!/bin/sh -e\n\n[ -d /var/log/kong ] || mkdir -p /var/log/kong\nchown kong:kong /var/log/kong\n\nexec chpst -u kong /usr/bin/svlogd -tt /var/log/kong\nEOF\nchmod 744 /etc/sv/kong/run /etc/sv/kong/log/run\n\ncd /etc/service\nln -s /etc/sv/kong\n\n# Verify Admin API is up\nRUNNING=0\nfor I in 1 2 3 4 5 6 7 8 9; do\n    curl -s -I http://localhost:8001/status | grep -q \"200 OK\"\n    if [ $? = 0 ]; then\n        RUNNING=1\n        break\n    fi\n    sleep 1\ndone\n\nif [ $RUNNING = 0 ]; then\n    echo \"Cannot connect to admin API, avoiding further configuration.\"\n    exit 1\nfi\n\n# Enable healthchecks using a kong endpoint\ncurl -s -I http://localhost:8000/status | grep -q \"200 OK\"\nif [ $? != 0 ]; then\n    echo \"Configuring healthcheck\"\n    curl -s -X POST http://localhost:8001/services \\\n        -d name=status \\\n        -d host=localhost \\\n        -d port=8001 \\\n        -d path=/status \u003e /dev/null\n    curl -s -X POST http://localhost:8001/services/status/routes \\\n        -d name=status \\\n        -d 'methods[]=HEAD' \\\n        -d 'methods[]=GET' \\\n        -d 'paths[]=/status' \u003e /dev/null\n    curl -s -X POST http://localhost:8001/services/status/plugins \\\n        -d name=ip-restriction \\\n        -d \"config.whitelist=127.0.0.1\" \\\n        -d \"config.whitelist=${VPC_CIDR_BLOCK}\" \u003e /dev/null\nfi\n\nif [ \"$EE_LICENSE\" != \"placeholder\" ]; then\n    echo \"Configuring enterprise edition settings\"\n    \n    # Monitor role, endpoints, user, for healthcheck\n    curl -s -X GET -I http://localhost:8001/rbac/roles/monitor | grep -q \"200 OK\"\n    if [ $? != 0 ]; then\n        COMMENT=\"Load balancer access to /status\"\n\n        curl -s -X POST http://localhost:8001/rbac/roles \\\n            -d name=monitor \\\n            -d comment=\"$COMMENT\" \u003e /dev/null\n        curl -s -X POST http://localhost:8001/rbac/roles/monitor/endpoints \\\n            -d endpoint=/status -d actions=read \\\n            -d comment=\"$COMMENT\" \u003e /dev/null\n        curl -s -X POST http://localhost:8001/rbac/users \\\n            -d name=monitor -d user_token=monitor \\\n            -d comment=\"$COMMENT\" \u003e /dev/null\n        curl -s -X POST http://localhost:8001/rbac/users/monitor/roles \\\n            -d roles=monitor \u003e /dev/null\n\n        # Add authentication token for /status\n        curl -s -X POST http://localhost:8001/services/status/plugins \\\n            -d name=request-transformer \\\n            -d 'config.add.headers[]=Kong-Admin-Token:monitor' \u003e /dev/null\n    fi\n\n    sv stop /etc/sv/kong\n    cat \u003c\u003cEOF \u003e\u003e /etc/kong/kong.conf\nenforce_rbac = on\nadmin_gui_auth = basic-auth\nadmin_gui_session_conf = { \"secret\":\"${SESSION_SECRET}\", \"cookie_secure\":false }\nEOF\n\n    sv start /etc/sv/kong     \nfi\n",
            "vars": {
              "CE_PKG": "kong-1.5.0.bionic.amd64.deb",
              "DB_USER": "kong_build",
              "DECK_VERSION": "1.0.0",
              "EE_PKG": "kong-enterprise-edition-1.3.0.1.bionic.all.deb ",
              "MANAGER_HOST": "internal-kong-build-internal-0000000000.me-south-1.elb.amazonaws.com",
              "PARAMETER_PATH": "/kong/build",
              "PORTAL_HOST": "internal-kong-build-internal-000000000000.me-south-1.elb.amazonaws.com",
              "REGION": "me-south-1",
              "SESSION_SECRET": "q000000000000xf2sOp",
              "VPC_CIDR_BLOCK": "10.139.0.0/19"
            }
          }
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_autoscaling_group",
      "name": "kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:autoscaling:me-south-1:000000000000:autoScalingGroup:381bf60e-e63c-4722-bbdd-9706a404a849:autoScalingGroupName/kong-build",
            "availability_zones": [
              "me-south-1a",
              "me-south-1b"
            ],
            "default_cooldown": 300,
            "desired_capacity": 2,
            "enabled_metrics": null,
            "force_delete": false,
            "health_check_grace_period": 300,
            "health_check_type": "ELB",
            "id": "kong-build",
            "initial_lifecycle_hook": [],
            "launch_configuration": "kong-build-20200706115158790500000001",
            "launch_template": [],
            "load_balancers": [],
            "max_instance_lifetime": 0,
            "max_size": 3,
            "metrics_granularity": "1Minute",
            "min_elb_capacity": null,
            "min_size": 1,
            "mixed_instances_policy": [],
            "name": "kong-build",
            "name_prefix": null,
            "placement_group": "",
            "protect_from_scale_in": false,
            "service_linked_role_arn": "arn:aws:iam::00000000000:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling",
            "suspended_processes": null,
            "tag": [
              {
                "key": "Description",
                "propagate_at_launch": true,
                "value": "Kong API Gateway"
              },
              {
                "key": "Environment",
                "propagate_at_launch": true,
                "value": "build"
              },
              {
                "key": "Name",
                "propagate_at_launch": true,
                "value": "kong-build"
              },
              {
                "key": "Owner",
                "propagate_at_launch": true,
                "value": "tech_fur@outlook.com"
              },
              {
                "key": "Service",
                "propagate_at_launch": true,
                "value": "kong"
              },
              {
                "key": "Team",
                "propagate_at_launch": true,
                "value": "DevOps"
              }
            ],
            "tags": null,
            "target_group_arns": [
              "arn:aws:elasticloadbalancing:me-south-1:0000000000000:targetgroup/kong-build-admin/5333797be9e19e33",
              "arn:aws:elasticloadbalancing:me-south-1:0000000000000:targetgroup/kong-build-external/45fdc6f819c2511b",
              "arn:aws:elasticloadbalancing:me-south-1:0000000000000:targetgroup/kong-build-internal/d152c045fb7cf231",
              "arn:aws:elasticloadbalancing:me-south-1:0000000000000:targetgroup/kong-build-manager/929236c8933a7f6d",
              "arn:aws:elasticloadbalancing:me-south-1:0000000000000:targetgroup/kong-build-portal/f44550813b740172",
              "arn:aws:elasticloadbalancing:me-south-1:0000000000000:targetgroup/kong-build-porter-gui/2948acf3b0c2f002"
            ],
            "termination_policies": null,
            "timeouts": null,
            "vpc_zone_identifier": [
              "subnet-0400000000048",
              "subnet-000000000008"
            ],
            "wait_for_capacity_timeout": "10m",
            "wait_for_elb_capacity": null
          },
          "private": "e0000000000000",
          "dependencies": [
            "module.kong.aws_db_instance.kong",
            "module.kong.aws_db_parameter_group.kong",
            "module.kong.aws_iam_instance_profile.kong",
            "module.kong.aws_iam_role.kong",
            "module.kong.aws_launch_configuration.kong",
            "module.kong.aws_lb.internal",
            "module.kong.aws_lb_target_group.admin",
            "module.kong.aws_lb_target_group.external",
            "module.kong.aws_lb_target_group.internal",
            "module.kong.aws_lb_target_group.manager",
            "module.kong.aws_lb_target_group.portal",
            "module.kong.aws_lb_target_group.portal-gui",
            "module.kong.aws_rds_cluster.kong",
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong",
            "module.kong.aws_security_group.postgresql",
            "module.kong.random_string.master_password",
            "module.kong.random_string.session_secret"
          ]
        }
      ]
    },
    {
      "module": "module.kong.module.kong_external_lb_cw",
      "mode": "managed",
      "type": "aws_cloudwatch_metric_alarm",
      "name": "http-code-4xx-count",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "actions_enabled": true,
            "alarm_actions": null,
            "alarm_description": "HTTP Code 4xx count is greater than 50 for kong-build-external",
            "alarm_name": "kong-build-external-http-code-4xx-count",
            "arn": "arn:aws:cloudwatch:me-south-1:00000000000:alarm:kong-build-external-http-code-4xx-count",
            "comparison_operator": "GreaterThanThreshold",
            "datapoints_to_alarm": 0,
            "dimensions": {
              "LoadBalancer": "app/kong-build-external/00000000000"
            },
            "evaluate_low_sample_count_percentiles": "",
            "evaluation_periods": 1,
            "extended_statistic": "",
            "id": "kong-build-external-http-code-4xx-count",
            "insufficient_data_actions": null,
            "metric_name": "HTTPCode_Target_4XX_Count",
            "metric_query": [],
            "namespace": "AWS/ApplicationELB",
            "ok_actions": null,
            "period": 60,
            "statistic": "Minimum",
            "tags": null,
            "threshold": 50,
            "threshold_metric_id": "",
            "treat_missing_data": "ignore",
            "unit": ""
          },
          "private": "ey0000000",
          "dependencies": [
            "module.kong.aws_lb.external",
            "module.kong.aws_security_group.external-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong.module.kong_internal_lb_cw",
      "mode": "managed",
      "type": "aws_cloudwatch_metric_alarm",
      "name": "http-code-4xx-count",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "actions_enabled": true,
            "alarm_actions": null,
            "alarm_description": "HTTP Code 4xx count is greater than 50 for kong-build-internal",
            "alarm_name": "kong-build-internal-http-code-4xx-count",
            "arn": "arn:aws:cloudwatch:me-south-1:0000000000000:alarm:kong-build-internal-http-code-4xx-count",
            "comparison_operator": "GreaterThanThreshold",
            "datapoints_to_alarm": 0,
            "dimensions": {
              "LoadBalancer": "app/kong-build-internal/00000000000000"
            },
            "evaluate_low_sample_count_percentiles": "",
            "evaluation_periods": 1,
            "extended_statistic": "",
            "id": "kong-build-internal-http-code-4xx-count",
            "insufficient_data_actions": null,
            "metric_name": "HTTPCode_Target_4XX_Count",
            "metric_query": [],
            "namespace": "AWS/ApplicationELB",
            "ok_actions": null,
            "period": 60,
            "statistic": "Minimum",
            "tags": null,
            "threshold": 50,
            "threshold_metric_id": "",
            "treat_missing_data": "ignore",
            "unit": ""
          },
          "private": "e00000000000000000000",
          "dependencies": [
            "module.kong.aws_lb.internal",
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong.module.kong_external_lb_cw",
      "mode": "managed",
      "type": "aws_cloudwatch_metric_alarm",
      "name": "http-code-5xx-count",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "actions_enabled": true,
            "alarm_actions": null,
            "alarm_description": "HTTP Code 5xx count is greater than 50 for kong-build-external",
            "alarm_name": "kong-build-external-http-code-5xx-count",
            "arn": "arn:aws:cloudwatch:me-south-1:000000000000:alarm:kong-build-external-http-code-5xx-count",
            "comparison_operator": "GreaterThanThreshold",
            "datapoints_to_alarm": 0,
            "dimensions": {
              "LoadBalancer": "app/kong-build-external/000000000000"
            },
            "evaluate_low_sample_count_percentiles": "",
            "evaluation_periods": 1,
            "extended_statistic": "",
            "id": "kong-build-external-http-code-5xx-count",
            "insufficient_data_actions": null,
            "metric_name": "HTTPCode_Target_5XX_Count",
            "metric_query": [],
            "namespace": "AWS/ApplicationELB",
            "ok_actions": null,
            "period": 60,
            "statistic": "Minimum",
            "tags": null,
            "threshold": 50,
            "threshold_metric_id": "",
            "treat_missing_data": "ignore",
            "unit": ""
          },
          "private": "e00000000000",
          "dependencies": [
            "module.kong.aws_lb.external",
            "module.kong.aws_security_group.external-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong.module.kong_internal_lb_cw",
      "mode": "managed",
      "type": "aws_cloudwatch_metric_alarm",
      "name": "http-code-5xx-count",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "actions_enabled": true,
            "alarm_actions": null,
            "alarm_description": "HTTP Code 5xx count is greater than 50 for kong-build-internal",
            "alarm_name": "kong-build-internal-http-code-5xx-count",
            "arn": "arn:aws:cloudwatch:me-south-1:000000000000000:alarm:kong-build-internal-http-code-5xx-count",
            "comparison_operator": "GreaterThanThreshold",
            "datapoints_to_alarm": 0,
            "dimensions": {
              "LoadBalancer": "app/kong-build-internal/0000000000000"
            },
            "evaluate_low_sample_count_percentiles": "",
            "evaluation_periods": 1,
            "extended_statistic": "",
            "id": "kong-build-internal-http-code-5xx-count",
            "insufficient_data_actions": null,
            "metric_name": "HTTPCode_Target_5XX_Count",
            "metric_query": [],
            "namespace": "AWS/ApplicationELB",
            "ok_actions": null,
            "period": 60,
            "statistic": "Minimum",
            "tags": null,
            "threshold": 50,
            "threshold_metric_id": "",
            "treat_missing_data": "ignore",
            "unit": ""
          },
          "private": "e00000000000",
          "dependencies": [
            "module.kong.aws_lb.internal",
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong.module.kong_external_lb_cw",
      "mode": "managed",
      "type": "aws_cloudwatch_metric_alarm",
      "name": "unhealthy-host-count",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "actions_enabled": true,
            "alarm_actions": null,
            "alarm_description": "Unhealthy host count is greater than 0 for kong-build-external",
            "alarm_name": "kong-build-external-unhealthy-host-count",
            "arn": "arn:aws:cloudwatch:me-south-1:00000000000:alarm:kong-build-external-unhealthy-host-count",
            "comparison_operator": "GreaterThanThreshold",
            "datapoints_to_alarm": 0,
            "dimensions": {
              "LoadBalancer": "app/kong-build-external/00000000000",
              "TargetGroup": "targetgroup/kong-build-external/0000000000"
            },
            "evaluate_low_sample_count_percentiles": "",
            "evaluation_periods": 1,
            "extended_statistic": "",
            "id": "kong-build-external-unhealthy-host-count",
            "insufficient_data_actions": null,
            "metric_name": "UnHealthyHostCount",
            "metric_query": [],
            "namespace": "AWS/ApplicationELB",
            "ok_actions": null,
            "period": 60,
            "statistic": "Minimum",
            "tags": null,
            "threshold": 0,
            "threshold_metric_id": "",
            "treat_missing_data": "missing",
            "unit": ""
          },
          "private": "e00000000000000",
          "dependencies": [
            "module.kong.aws_lb.external",
            "module.kong.aws_lb_target_group.external",
            "module.kong.aws_security_group.external-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong.module.kong_internal_lb_cw",
      "mode": "managed",
      "type": "aws_cloudwatch_metric_alarm",
      "name": "unhealthy-host-count",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "actions_enabled": true,
            "alarm_actions": null,
            "alarm_description": "Unhealthy host count is greater than 0 for kong-build-internal",
            "alarm_name": "kong-build-internal-unhealthy-host-count",
            "arn": "arn:aws:cloudwatch:me-south-1:000000000000:alarm:kong-build-internal-unhealthy-host-count",
            "comparison_operator": "GreaterThanThreshold",
            "datapoints_to_alarm": 0,
            "dimensions": {
              "LoadBalancer": "app/kong-build-internal/0000000000000",
              "TargetGroup": "targetgroup/kong-build-internal/00000000000"
            },
            "evaluate_low_sample_count_percentiles": "",
            "evaluation_periods": 1,
            "extended_statistic": "",
            "id": "kong-build-internal-unhealthy-host-count",
            "insufficient_data_actions": null,
            "metric_name": "UnHealthyHostCount",
            "metric_query": [],
            "namespace": "AWS/ApplicationELB",
            "ok_actions": null,
            "period": 60,
            "statistic": "Minimum",
            "tags": null,
            "threshold": 0,
            "threshold_metric_id": "",
            "treat_missing_data": "missing",
            "unit": ""
          },
          "private": "e0000000000000",
          "dependencies": [
            "module.kong.aws_lb.internal",
            "module.kong.aws_lb_target_group.internal",
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_db_instance",
      "name": "kong",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "address": "kong-build.cnhib.me-south-1.rds.amazonaws.com",
            "allocated_storage": 100,
            "allow_major_version_upgrade": null,
            "apply_immediately": null,
            "arn": "arn:aws:rds:me-south-1:000000000000:db:kong-build",
            "auto_minor_version_upgrade": true,
            "availability_zone": "me-south-1c",
            "backup_retention_period": 7,
            "backup_window": "11:40-12:10",
            "ca_cert_identifier": "rds-ca-2019-me-south-1",
            "character_set_name": null,
            "copy_tags_to_snapshot": false,
            "db_subnet_group_name": "default-vpc-0300000000e",
            "delete_automated_backups": true,
            "deletion_protection": false,
            "domain": "",
            "domain_iam_role_name": "",
            "enabled_cloudwatch_logs_exports": null,
            "endpoint": "kong-build.cnhib.me-south-1.rds.amazonaws.com:5432",
            "engine": "postgres",
            "engine_version": "11.4",
            "final_snapshot_identifier": null,
            "hosted_zone_id": "00000000000",
            "iam_database_authentication_enabled": false,
            "id": "kong-build",
            "identifier": "kong-build",
            "identifier_prefix": null,
            "instance_class": "db.t3.large",
            "iops": 0,
            "kms_key_id": "",
            "license_model": "postgresql-license",
            "maintenance_window": "sat:08:54-sat:09:24",
            "max_allocated_storage": 0,
            "monitoring_interval": 0,
            "monitoring_role_arn": "",
            "multi_az": false,
            "name": "",
            "option_group_name": "default:postgres-11",
            "parameter_group_name": "kong-build",
            "password": "R00000000008",
            "performance_insights_enabled": false,
            "performance_insights_kms_key_id": "",
            "performance_insights_retention_period": 0,
            "port": 5432,
            "publicly_accessible": false,
            "replicas": [],
            "replicate_source_db": "",
            "resource_id": "db-3S7000000000",
            "s3_import": [],
            "security_group_names": null,
            "skip_final_snapshot": true,
            "snapshot_identifier": null,
            "status": "available",
            "storage_encrypted": false,
            "storage_type": "gp2",
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "timeouts": null,
            "timezone": "",
            "username": "root",
            "vpc_security_group_ids": [
              "sg-0000000048"
            ]
          },
          "private": "000000000000000",
          "dependencies": [
            "module.kong.aws_db_parameter_group.kong",
            "module.kong.aws_security_group.postgresql",
            "module.kong.random_string.master_password"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_db_parameter_group",
      "name": "kong",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:rds:me-south-1:0000000000:pg:kong-build",
            "description": "Kong API Gateway",
            "family": "postgres11",
            "id": "kong-build",
            "name": "kong-build",
            "name_prefix": null,
            "parameter": [],
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            }
          },
          "private": "b000000="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_elasticache_parameter_group",
      "name": "kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "Kong API Gateway",
            "family": "redis5.0",
            "id": "kong-build",
            "name": "kong-build",
            "parameter": []
          },
          "private": "b0000000"
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_elasticache_replication_group",
      "name": "kong",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_iam_instance_profile",
      "name": "kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::000000000000:instance-profile/kong-build",
            "create_date": "2020-07-06T11:48:55Z",
            "id": "kong-build",
            "name": "kong-build",
            "name_prefix": null,
            "path": "/",
            "role": "kong-build",
            "roles": [],
            "unique_id": "A00000000000ZQ"
          },
          "private": "b00000",
          "dependencies": [
            "module.kong.aws_iam_role.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:iam::000000000000:role/kong-build",
            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
            "create_date": "2020-07-06T11:48:50Z",
            "description": "",
            "force_detach_policies": false,
            "id": "kong-build",
            "max_session_duration": 3600,
            "name": "kong-build",
            "name_prefix": null,
            "path": "/",
            "permissions_boundary": null,
            "tags": null,
            "unique_id": "A000000000DJ56"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_iam_role_policy",
      "name": "kong-ssm",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "kong-build:kong-build-ssm",
            "name": "kong-build-ssm",
            "name_prefix": null,
            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ssm:DescribeParameters\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"ssm:GetParameter\",\n      \"Resource\": \"arn:aws:ssm:*:*:parameter/kong/build/*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": \"kms:Decrypt\",\n      \"Resource\": \"arn:aws:kms:me-south-1:0000000000:key/6000000a1\"\n    }\n  ]\n}",
            "role": "kong-build"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.kong.aws_iam_role.kong",
            "module.kong.aws_kms_alias.kong",
            "module.kong.aws_kms_key.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_kms_alias",
      "name": "kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:me-south-1:000000000000:alias/kong-build",
            "id": "alias/kong-build",
            "name": "alias/kong-build",
            "name_prefix": null,
            "target_key_arn": "arn:aws:kms:me-south-1:0000000000:key/6600000006577a1",
            "target_key_id": "660000006577a1"
          },
          "private": "b00000=",
          "dependencies": [
            "module.kong.aws_kms_key.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_kms_key",
      "name": "kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:kms:me-south-1:000000000000:key/665100000000c6577a1",
            "customer_master_key_spec": "SYMMETRIC_DEFAULT",
            "deletion_window_in_days": null,
            "description": "kong-build",
            "enable_key_rotation": false,
            "id": "66500000000a1",
            "is_enabled": true,
            "key_id": "6000000007a1",
            "key_usage": "ENCRYPT_DECRYPT",
            "policy": "{\"Id\":\"key-default-1\",\"Statement\":[{\"Action\":\"kms:*\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::0000000000:root\"},\"Resource\":\"*\",\"Sid\":\"Enable IAM User Permissions\"}],\"Version\":\"2012-10-17\"}",
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            }
          },
          "private": "b="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_launch_configuration",
      "name": "kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:autoscaling:me-south-1:000000000000:launchConfiguration:c8400000008c936e:launchConfigurationName/kong-build-20200706115158790500000001",
            "associate_public_ip_address": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enable_monitoring": true,
            "ephemeral_block_device": [],
            "iam_instance_profile": "kong-build",
            "id": "kong-build-20200706115158790500000001",
            "image_id": "ami-0ca656ad4cf917e1f",
            "instance_type": "m5.2xlarge",
            "key_name": "kongUAT",
            "name": "kong-build-20200706115158790500000001",
            "name_prefix": "kong-build-",
            "placement_tenancy": "default",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "encrypted": false,
                "iops": 0,
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "security_groups": [
              "sg-0180000000000",
              "sg-03000000000000"
            ],
            "spot_price": "",
            "user_data": "00000000000000000000",
            "user_data_base64": null,
            "vpc_classic_link_id": "",
            "vpc_classic_link_security_groups": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.kong.aws_iam_instance_profile.kong",
            "module.kong.aws_iam_role.kong",
            "module.kong.aws_lb.internal",
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong",
            "module.kong.random_string.session_secret"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb",
      "name": "external",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "access_logs": [
              {
                "bucket": "",
                "enabled": false,
                "prefix": ""
              }
            ],
            "arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:loadbalancer/app/kong-build-external/0000000000",
            "arn_suffix": "app/kong-build-external/0000000000000",
            "dns_name": "kong-build-external-2024507315.me-south-1.elb.amazonaws.com",
            "drop_invalid_header_fields": false,
            "enable_cross_zone_load_balancing": null,
            "enable_deletion_protection": true,
            "enable_http2": true,
            "id": "arn:aws:elasticloadbalancing:me-south-1:000000000:loadbalancer/app/kong-build-external/000000000000",
            "idle_timeout": 60,
            "internal": false,
            "ip_address_type": "ipv4",
            "load_balancer_type": "application",
            "name": "kong-build-external",
            "name_prefix": null,
            "security_groups": [
              "sg-00000000000"
            ],
            "subnet_mapping": [
              {
                "allocation_id": "",
                "subnet_id": "subnet-0000000000000"
              },
              {
                "allocation_id": "",
                "subnet_id": "subnet-0e0000000000"
              }
            ],
            "subnets": [
              "subnet-000000000000",
              "subnet-0000000000000"
            ],
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-external",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "timeouts": null,
            "vpc_id": "vpc-0300000000000",
            "zone_id": "Z000000000"
          },
          "private": "e00000000000",
          "dependencies": [
            "module.kong.aws_security_group.external-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb",
      "name": "internal",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "access_logs": [
              {
                "bucket": "",
                "enabled": false,
                "prefix": ""
              }
            ],
            "arn": "arn:aws:elasticloadbalancing:me-south-1:000000000000:loadbalancer/app/kong-build-internal/00000000000",
            "arn_suffix": "app/kong-build-internal/3f47dedec3105e7a",
            "dns_name": "internal-kong-build-internal-314833879.me-south-1.elb.amazonaws.com",
            "drop_invalid_header_fields": false,
            "enable_cross_zone_load_balancing": null,
            "enable_deletion_protection": true,
            "enable_http2": true,
            "id": "arn:aws:elasticloadbalancing:me-south-1:0000000000:loadbalancer/app/kong-build-internal/000000000000",
            "idle_timeout": 60,
            "internal": true,
            "ip_address_type": "ipv4",
            "load_balancer_type": "application",
            "name": "kong-build-internal",
            "name_prefix": null,
            "security_groups": [
              "sg-000000000000"
            ],
            "subnet_mapping": [
              {
                "allocation_id": "",
                "subnet_id": "subnet-0000000000000"
              },
              {
                "allocation_id": "",
                "subnet_id": "subnet-000000000000"
              }
            ],
            "subnets": [
              "subnet-04000000008",
              "subnet-050000000000"
            ],
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-internal",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "timeouts": null,
            "vpc_id": "vpc-033700000000000",
            "zone_id": "ZS000000000ICD"
          },
          "private": "e00000000009",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "admin",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:listener/app/kong-build-internal/3f47dedec3105e7a/000000000",
            "certificate_arn": "arn:aws:acm:me-south-1:000000000:certificate/cc79a98a7",
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [],
                "target_group_arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000000:targetgroup/kong-build-admin/0000000000",
                "type": "forward"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:00000000000:listener/app/kong-build-internal/3f47dedec3105e7a/00000000000",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:loadbalancer/app/kong-build-internal/00000000000",
            "port": 8444,
            "protocol": "HTTPS",
            "ssl_policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
            "timeouts": null
          },
          "private": "ey0000000000",
          "dependencies": [
            "module.kong.aws_lb.internal",
            "module.kong.aws_lb_target_group.admin",
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "external-https",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:listener/app/kong-build-external/623a47b5d083c2f5/000000000000",
            "certificate_arn": "arn:aws:acm:me-south-1:00000000000:certificate/c10000008a7",
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [],
                "target_group_arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:targetgroup/kong-build-external/00000000000",
                "type": "forward"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:000000000:listener/app/kong-build-external/623a47b5d083c2f5/00000000000",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000:loadbalancer/app/kong-build-external/00000000000",
            "port": 443,
            "protocol": "HTTPS",
            "ssl_policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
            "timeouts": null
          },
          "private": "0000000000=",
          "dependencies": [
            "module.kong.aws_lb.external",
            "module.kong.aws_lb_target_group.external",
            "module.kong.aws_security_group.external-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "internal-http",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:000000000000:listener/app/kong-build-internal/3f47dedec3105e7a/0000000000",
            "certificate_arn": null,
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [],
                "target_group_arn": "arn:aws:elasticloadbalancing:me-south-1:000000000000:targetgroup/kong-build-internal/00000000000",
                "type": "forward"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:0000000000:listener/app/kong-build-internal/3f47dedec3105e7a/0000000000000",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:loadbalancer/app/kong-build-internal/000000000000",
            "port": 80,
            "protocol": "HTTP",
            "ssl_policy": "",
            "timeouts": null
          },
          "private": "00000000000=",
          "dependencies": [
            "module.kong.aws_lb.internal",
            "module.kong.aws_lb_target_group.internal",
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "internal-https",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000:listener/app/kong-build-internal/3f47dedec3105e7a/000000000000",
            "certificate_arn": "arn:aws:acm:me-south-1:000000000000:certificate/c100000008a7",
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [],
                "target_group_arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000000:targetgroup/kong-build-internal/00000000000",
                "type": "forward"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:0000000000:listener/app/kong-build-internal/3f47dedec3105e7a/0000000000000",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:loadbalancer/app/kong-build-internal/000000000000",
            "port": 443,
            "protocol": "HTTPS",
            "ssl_policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
            "timeouts": null
          },
          "private": "ey000000000000000",
          "dependencies": [
            "module.kong.aws_lb.internal",
            "module.kong.aws_lb_target_group.internal",
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "manager",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:listener/app/kong-build-internal/3f47dedec3105e7a/0000000000",
            "certificate_arn": "arn:aws:acm:me-south-1:00000000000:certificate/c100000000098a7",
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [],
                "target_group_arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000:targetgroup/kong-build-manager/000000000000",
                "type": "forward"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:000000000000:listener/app/kong-build-internal/3f47dedec3105e7a/000000000",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000:loadbalancer/app/kong-build-internal/00000000000",
            "port": 8445,
            "protocol": "HTTPS",
            "ssl_policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
            "timeouts": null
          },
          "private": "00000000000000=",
          "dependencies": [
            "module.kong.aws_lb.internal",
            "module.kong.aws_lb_target_group.manager",
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "portal",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000:listener/app/kong-build-internal/300000007a/0000000000",
            "certificate_arn": "arn:aws:acm:me-south-1:00000000000:certificate/c1000000009a98a7",
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [],
                "target_group_arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000:targetgroup/kong-build-portal/000000000000",
                "type": "forward"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:0000000000000:listener/app/kong-build-internal/0000000000/0000000000",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:loadbalancer/app/kong-build-internal/0000000000",
            "port": 8447,
            "protocol": "HTTPS",
            "ssl_policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
            "timeouts": null
          },
          "private": "e0000000000000=",
          "dependencies": [
            "module.kong.aws_lb.internal",
            "module.kong.aws_lb_target_group.portal",
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_listener",
      "name": "portal-gui",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:listener/app/kong-build-internal/0000000000/0000000000",
            "certificate_arn": "arn:aws:acm:me-south-1:00000000000:certificate/c1000000700000",
            "default_action": [
              {
                "authenticate_cognito": [],
                "authenticate_oidc": [],
                "fixed_response": [],
                "forward": [],
                "order": 1,
                "redirect": [],
                "target_group_arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000:targetgroup/kong-build-porter-gui/000000000000",
                "type": "forward"
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:000000000000:listener/app/kong-build-internal/000000000/0000000000000",
            "load_balancer_arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000:loadbalancer/app/kong-build-internal/000000000000",
            "port": 8446,
            "protocol": "HTTPS",
            "ssl_policy": "ELBSecurityPolicy-TLS-1-2-2017-01",
            "timeouts": null
          },
          "private": "000000000000",
          "dependencies": [
            "module.kong.aws_lb.internal",
            "module.kong.aws_lb_target_group.portal-gui",
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "admin",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:targetgroup/kong-build-admin/0000000000000",
            "arn_suffix": "targetgroup/kong-build-admin/5000000000000",
            "deregistration_delay": 300,
            "health_check": [
              {
                "enabled": true,
                "healthy_threshold": 5,
                "interval": 5,
                "matcher": "200",
                "path": "/status",
                "port": "8000",
                "protocol": "HTTP",
                "timeout": 3,
                "unhealthy_threshold": 2
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:0000000000000:targetgroup/kong-build-admin/00000000000",
            "lambda_multi_value_headers_enabled": false,
            "load_balancing_algorithm_type": "round_robin",
            "name": "kong-build-admin",
            "name_prefix": null,
            "port": 8001,
            "protocol": "HTTP",
            "proxy_protocol_v2": false,
            "slow_start": 0,
            "stickiness": [
              {
                "cookie_duration": 86400,
                "enabled": false,
                "type": "lb_cookie"
              }
            ],
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-admin",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "target_type": "instance",
            "vpc_id": "vpc-000000000000"
          },
          "private": "b0000000"
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "external",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:0000000000000:targetgroup/kong-build-external/0000000000000",
            "arn_suffix": "targetgroup/kong-build-external/000000000000",
            "deregistration_delay": 300,
            "health_check": [
              {
                "enabled": true,
                "healthy_threshold": 5,
                "interval": 5,
                "matcher": "200",
                "path": "/status",
                "port": "8000",
                "protocol": "HTTP",
                "timeout": 3,
                "unhealthy_threshold": 2
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:00000000000000:targetgroup/kong-build-external/00000000000000",
            "lambda_multi_value_headers_enabled": false,
            "load_balancing_algorithm_type": "round_robin",
            "name": "kong-build-external",
            "name_prefix": null,
            "port": 8000,
            "protocol": "HTTP",
            "proxy_protocol_v2": false,
            "slow_start": 0,
            "stickiness": [
              {
                "cookie_duration": 86400,
                "enabled": false,
                "type": "lb_cookie"
              }
            ],
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-external",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "target_type": "instance",
            "vpc_id": "vpc-03370000000000e"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "internal",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:targetgroup/kong-build-internal/00000000000000",
            "arn_suffix": "targetgroup/kong-build-internal/000000000000",
            "deregistration_delay": 300,
            "health_check": [
              {
                "enabled": true,
                "healthy_threshold": 5,
                "interval": 5,
                "matcher": "200",
                "path": "/status",
                "port": "8000",
                "protocol": "HTTP",
                "timeout": 3,
                "unhealthy_threshold": 2
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:000000000000:targetgroup/kong-build-internal/0000000000000",
            "lambda_multi_value_headers_enabled": false,
            "load_balancing_algorithm_type": "round_robin",
            "name": "kong-build-internal",
            "name_prefix": null,
            "port": 8000,
            "protocol": "HTTP",
            "proxy_protocol_v2": false,
            "slow_start": 0,
            "stickiness": [
              {
                "cookie_duration": 86400,
                "enabled": false,
                "type": "lb_cookie"
              }
            ],
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-internal",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "target_type": "instance",
            "vpc_id": "vpc-0330000000000e"
          },
          "private": "b0000000="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "manager",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:00000000000:targetgroup/kong-build-manager/0000000000000",
            "arn_suffix": "targetgroup/kong-build-manager/00000000000",
            "deregistration_delay": 300,
            "health_check": [
              {
                "enabled": true,
                "healthy_threshold": 5,
                "interval": 5,
                "matcher": "200",
                "path": "/status",
                "port": "8000",
                "protocol": "HTTP",
                "timeout": 3,
                "unhealthy_threshold": 2
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:00000000000:targetgroup/kong-build-manager/00000000000",
            "lambda_multi_value_headers_enabled": false,
            "load_balancing_algorithm_type": "round_robin",
            "name": "kong-build-manager",
            "name_prefix": null,
            "port": 8002,
            "protocol": "HTTP",
            "proxy_protocol_v2": false,
            "slow_start": 0,
            "stickiness": [
              {
                "cookie_duration": 86400,
                "enabled": false,
                "type": "lb_cookie"
              }
            ],
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-manager",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "target_type": "instance",
            "vpc_id": "vpc-0300000000000000"
          },
          "private": "bn00000000"
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "portal",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:000000000000:targetgroup/kong-build-portal/000000000000",
            "arn_suffix": "targetgroup/kong-build-portal/0000000000",
            "deregistration_delay": 300,
            "health_check": [
              {
                "enabled": true,
                "healthy_threshold": 5,
                "interval": 5,
                "matcher": "200",
                "path": "/status",
                "port": "8000",
                "protocol": "HTTP",
                "timeout": 3,
                "unhealthy_threshold": 2
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:0000000000:targetgroup/kong-build-portal/f00000000172",
            "lambda_multi_value_headers_enabled": false,
            "load_balancing_algorithm_type": "round_robin",
            "name": "kong-build-portal",
            "name_prefix": null,
            "port": 8004,
            "protocol": "HTTP",
            "proxy_protocol_v2": false,
            "slow_start": 0,
            "stickiness": [
              {
                "cookie_duration": 86400,
                "enabled": false,
                "type": "lb_cookie"
              }
            ],
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-portal",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "target_type": "instance",
            "vpc_id": "vpc-000000000000"
          },
          "private": "b00000A=="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_lb_target_group",
      "name": "portal-gui",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:elasticloadbalancing:me-south-1:000000000000:targetgroup/kong-build-porter-gui/000000000000",
            "arn_suffix": "targetgroup/kong-build-porter-gui/00000000000",
            "deregistration_delay": 300,
            "health_check": [
              {
                "enabled": true,
                "healthy_threshold": 5,
                "interval": 5,
                "matcher": "200",
                "path": "/status",
                "port": "8000",
                "protocol": "HTTP",
                "timeout": 3,
                "unhealthy_threshold": 2
              }
            ],
            "id": "arn:aws:elasticloadbalancing:me-south-1:00000000000:targetgroup/kong-build-porter-gui/2000000002",
            "lambda_multi_value_headers_enabled": false,
            "load_balancing_algorithm_type": "round_robin",
            "name": "kong-build-porter-gui",
            "name_prefix": null,
            "port": 8003,
            "protocol": "HTTP",
            "proxy_protocol_v2": false,
            "slow_start": 0,
            "stickiness": [
              {
                "cookie_duration": 86400,
                "enabled": false,
                "type": "lb_cookie"
              }
            ],
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-porter-gui",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "target_type": "instance",
            "vpc_id": "vpc-03300000000000000"
          },
          "private": "b000000A=="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_rds_cluster",
      "name": "kong",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_rds_cluster_instance",
      "name": "kong",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_rds_cluster_parameter_group",
      "name": "kong",
      "each": "list",
      "provider": "provider.aws",
      "instances": []
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "external-lb",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:me-south-1:00000000000:security-group/sg-0f0000000000",
            "description": "Kong External Load Balancer",
            "egress": [],
            "id": "sg-000000000000a",
            "ingress": [],
            "name": "kong-build-external-lb",
            "name_prefix": null,
            "owner_id": "0000000000",
            "revoke_rules_on_delete": false,
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-external-lb",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "timeouts": null,
            "vpc_id": "vpc-030000000000000"
          },
          "private": "ey000000000000"
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "internal-lb",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:me-south-1:0000000000:security-group/sg-000000000000b",
            "description": "Kong Internal Load Balancer",
            "egress": [],
            "id": "sg-02599b4bc3468ad9b",
            "ingress": [],
            "name": "kong-build-internal-lb",
            "name_prefix": null,
            "owner_id": "0000000000000",
            "revoke_rules_on_delete": false,
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-internal-lb",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "timeouts": null,
            "vpc_id": "vpc-03370000000000ce"
          },
          "private": "eyJ0000000000"
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:me-south-1:00000000000:security-group/sg-00000000008",
            "description": "Kong EC2 instances",
            "egress": [],
            "id": "sg-0100000000008",
            "ingress": [],
            "name": "kong-build",
            "name_prefix": null,
            "owner_id": "000000000000",
            "revoke_rules_on_delete": false,
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "timeouts": null,
            "vpc_id": "vpc-030000000000"
          },
          "private": "e0000000000000000="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "postgresql",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:me-south-1:0000000000000:security-group/sg-00000000000008",
            "description": "Kong RDS instance",
            "egress": [],
            "id": "sg-000000000008",
            "ingress": [],
            "name": "kong-build-postgresql",
            "name_prefix": null,
            "owner_id": "000000000000000",
            "revoke_rules_on_delete": false,
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-postgresql",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "timeouts": null,
            "vpc_id": "vpc-030000000000000e"
          },
          "private": "ey0000000000000="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group",
      "name": "redis",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:me-south-1:000000000000:security-group/sg-0000000000000000",
            "description": "Kong redis cluster",
            "egress": [],
            "id": "sg-0900000000053",
            "ingress": [],
            "name": "kong-build-redis",
            "name_prefix": null,
            "owner_id": "000000000000",
            "revoke_rules_on_delete": false,
            "tags": {
              "Description": "Kong API Gateway",
              "Environment": "build",
              "Name": "kong-build-redis",
              "Owner": "tech_fur@outlook.com",
              "Service": "kong",
              "Team": "DevOps"
            },
            "timeouts": null,
            "vpc_id": "vpc-03000000000000"
          },
          "private": "ey00000000000000000000="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "admin-ingress-bastion",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "127.0.0.1/32"
            ],
            "description": null,
            "from_port": 8001,
            "id": "sgrule-2274318676",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-000000000000f8",
            "self": false,
            "source_security_group_id": null,
            "to_port": 8001,
            "type": "ingress"
          },
          "private": "ey00000000000000",
          "dependencies": [
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "admin-ingress-external-lb",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8001,
            "id": "sgrule-3548922501",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-000000000000008",
            "self": false,
            "source_security_group_id": "sg-00000000000a",
            "to_port": 8001,
            "type": "ingress"
          },
          "private": "e0000000000000000",
          "dependencies": [
            "module.kong.aws_security_group.external-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "admin-ingress-internal-lb",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8001,
            "id": "sgrule-901246890",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0000000000000008",
            "self": false,
            "source_security_group_id": "sg-0000000000000b",
            "to_port": 8001,
            "type": "ingress"
          },
          "private": "ey0000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "external-lb-egress-admin",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8001,
            "id": "sgrule-2888941144",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-00000000000000a",
            "self": false,
            "source_security_group_id": "sg-000000000000008",
            "to_port": 8001,
            "type": "egress"
          },
          "private": "e000000000000000000",
          "dependencies": [
            "module.kong.aws_security_group.external-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "external-lb-egress-proxy",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8000,
            "id": "sgrule-3437968343",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-00000000000000a",
            "self": false,
            "source_security_group_id": "sg-00000000000008",
            "to_port": 8000,
            "type": "egress"
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjIifQ==",
          "dependencies": [
            "module.kong.aws_security_group.external-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "external-lb-ingress-proxy",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 443,
            "id": "sgrule-2664433367",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-00000000000006a",
            "self": false,
            "source_security_group_id": null,
            "to_port": 443,
            "type": "ingress"
          },
          "private": "e0000000000000",
          "dependencies": [
            "module.kong.aws_security_group.external-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-egress-admin",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8001,
            "id": "sgrule-1535238522",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-000000000000000b",
            "self": false,
            "source_security_group_id": "sg-010000000000008",
            "to_port": 8001,
            "type": "egress"
          },
          "private": "e00000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-egress-manager",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8002,
            "id": "sgrule-4209930219",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-02000000000000009b",
            "self": false,
            "source_security_group_id": "sg-00000000000000f8",
            "to_port": 8002,
            "type": "egress"
          },
          "private": "e00000000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-egress-portal",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8004,
            "id": "sgrule-1665168520",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-000000000000009b",
            "self": false,
            "source_security_group_id": "sg-01000000000008",
            "to_port": 8004,
            "type": "egress"
          },
          "private": "e0000000000000000=",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-egress-portal-gui",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8003,
            "id": "sgrule-2587159140",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-00000000009b",
            "self": false,
            "source_security_group_id": "sg-01000000000f8",
            "to_port": 8003,
            "type": "egress"
          },
          "private": "ey0000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-egress-proxy",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8000,
            "id": "sgrule-995845365",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0000000000000b",
            "self": false,
            "source_security_group_id": "sg-000000000008",
            "to_port": 8000,
            "type": "egress"
          },
          "private": "ey00000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-ingress-admin",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 8444,
            "id": "sgrule-3018571686",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-00000000000000b",
            "self": false,
            "source_security_group_id": null,
            "to_port": 8444,
            "type": "ingress"
          },
          "private": "e0000000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-ingress-manager",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 8445,
            "id": "sgrule-1372128165",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0000000000000",
            "self": false,
            "source_security_group_id": null,
            "to_port": 8445,
            "type": "ingress"
          },
          "private": "ey0000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-ingress-portal",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 8447,
            "id": "sgrule-1325235682",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-00000000000000",
            "self": false,
            "source_security_group_id": null,
            "to_port": 8447,
            "type": "ingress"
          },
          "private": "ey000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-ingress-portal-gui",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 8446,
            "id": "sgrule-2900345313",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-00000000000000",
            "self": false,
            "source_security_group_id": null,
            "to_port": 8446,
            "type": "ingress"
          },
          "private": "e00000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-ingress-proxy-http",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 80,
            "id": "sgrule-3562616327",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0000000000000b",
            "self": false,
            "source_security_group_id": null,
            "to_port": 80,
            "type": "ingress"
          },
          "private": "ey0000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "internal-lb-ingress-proxy-https",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 443,
            "id": "sgrule-651736565",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-00000000009b",
            "self": false,
            "source_security_group_id": null,
            "to_port": 443,
            "type": "ingress"
          },
          "private": "ey000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "kong-egress-http",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 80,
            "id": "sgrule-4202900957",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0000000000000",
            "self": false,
            "source_security_group_id": null,
            "to_port": 80,
            "type": "egress"
          },
          "private": "ey000000000000",
          "dependencies": [
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "kong-egress-https",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "0.0.0.0/0"
            ],
            "description": null,
            "from_port": 443,
            "id": "sgrule-2284817049",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-000000000008",
            "self": false,
            "source_security_group_id": null,
            "to_port": 443,
            "type": "egress"
          },
          "private": "e000000000000000",
          "dependencies": [
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "manager-ingress-internal-lb",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8002,
            "id": "sgrule-2988319734",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0000000000008",
            "self": false,
            "source_security_group_id": "sg-000000000000b",
            "to_port": 8002,
            "type": "ingress"
          },
          "private": "e00000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "portal-gui-ingress-internal-lb",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8003,
            "id": "sgrule-3480840130",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0000000000000",
            "self": false,
            "source_security_group_id": "sg-00000000009b",
            "to_port": 8003,
            "type": "ingress"
          },
          "private": "e00000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "portal-ingress-internal-lb",
      "each": "list",
      "provider": "provider.aws",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8004,
            "id": "sgrule-1715256591",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-000000000008",
            "self": false,
            "source_security_group_id": "sg-000000000000b",
            "to_port": 8004,
            "type": "ingress"
          },
          "private": "e0000000000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "postgresql-ingress-bastion",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "127.0.0.1/32"
            ],
            "description": null,
            "from_port": 5432,
            "id": "sgrule-872390553",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-00000000000548",
            "self": false,
            "source_security_group_id": null,
            "to_port": 5432,
            "type": "ingress"
          },
          "private": "ey00000000000",
          "dependencies": [
            "module.kong.aws_security_group.postgresql"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "postgresql-ingress-kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 5432,
            "id": "sgrule-1709935712",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0000000000048",
            "self": false,
            "source_security_group_id": "sg-0000000000f8",
            "to_port": 5432,
            "type": "ingress"
          },
          "private": "e00000IjIifQ==",
          "dependencies": [
            "module.kong.aws_security_group.kong",
            "module.kong.aws_security_group.postgresql"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "proxy-ingress-external-lb",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8000,
            "id": "sgrule-2934900401",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0000000000000f8",
            "self": false,
            "source_security_group_id": "sg-0000000000000a",
            "to_port": 8000,
            "type": "ingress"
          },
          "private": "ey00000000000",
          "dependencies": [
            "module.kong.aws_security_group.external-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "proxy-ingress-internal-lb",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 8000,
            "id": "sgrule-1221634974",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-00000000000f8",
            "self": false,
            "source_security_group_id": "sg-000000000d9b",
            "to_port": 8000,
            "type": "ingress"
          },
          "private": "eyJ0000000",
          "dependencies": [
            "module.kong.aws_security_group.internal-lb",
            "module.kong.aws_security_group.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "redis-ingress-bastion",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": [
              "127.0.0.1/32"
            ],
            "description": null,
            "from_port": 6379,
            "id": "sgrule-1675183620",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-000000000b53",
            "self": false,
            "source_security_group_id": null,
            "to_port": 6379,
            "type": "ingress"
          },
          "private": "ey0000000ifQ==",
          "dependencies": [
            "module.kong.aws_security_group.redis"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_security_group_rule",
      "name": "redis-ingress-kong",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "cidr_blocks": null,
            "description": null,
            "from_port": 6379,
            "id": "sgrule-3883941999",
            "ipv6_cidr_blocks": null,
            "prefix_list_ids": null,
            "protocol": "tcp",
            "security_group_id": "sg-0000000000eb53",
            "self": false,
            "source_security_group_id": "sg-0000000200f8",
            "to_port": 6379,
            "type": "ingress"
          },
          "private": "eyJzi",
          "dependencies": [
            "module.kong.aws_security_group.kong",
            "module.kong.aws_security_group.redis"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_ssm_parameter",
      "name": "db-host",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allowed_pattern": "",
            "arn": "arn:aws:ssm:me-south-1:00000000000:parameter/kong/build/db/host",
            "description": "",
            "id": "/kong/build/db/host",
            "key_id": "",
            "name": "/kong/build/db/host",
            "overwrite": null,
            "tags": null,
            "tier": "Standard",
            "type": "String",
            "value": "kong-build.cvusbnqxnhib.me-south-1.rds.amazonaws.com",
            "version": 1
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.kong.aws_db_instance.kong",
            "module.kong.aws_db_parameter_group.kong",
            "module.kong.aws_rds_cluster.kong",
            "module.kong.aws_security_group.postgresql",
            "module.kong.random_string.master_password"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_ssm_parameter",
      "name": "db-master-password",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allowed_pattern": "",
            "arn": "arn:aws:ssm:me-south-1:00000000000:parameter/kong/build/db/password/master",
            "description": "",
            "id": "/kong/build/db/password/master",
            "key_id": "arn:aws:kms:me-south-1:00000000000:key/660uhu0000000e7c6577a1",
            "name": "/kong/build/db/password/master",
            "overwrite": true,
            "tags": null,
            "tier": "Standard",
            "type": "SecureString",
            "value": "0000x1rM8",
            "version": 1
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.kong.aws_kms_alias.kong",
            "module.kong.aws_kms_key.kong",
            "module.kong.random_string.master_password"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_ssm_parameter",
      "name": "db-name",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allowed_pattern": "",
            "arn": "arn:aws:ssm:me-south-1:0000000000:parameter/kong/build/db/name",
            "description": "",
            "id": "/kong/build/db/name",
            "key_id": "",
            "name": "/kong/build/db/name",
            "overwrite": null,
            "tags": null,
            "tier": "Standard",
            "type": "String",
            "value": "kong_build",
            "version": 1
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_ssm_parameter",
      "name": "db-password",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allowed_pattern": "",
            "arn": "arn:aws:ssm:me-south-1:00000000000:parameter/kong/build/db/password",
            "description": "",
            "id": "/kong/build/db/password",
            "key_id": "arn:aws:kms:me-south-1:0000000000:key/6650890077a1",
            "name": "/kong/build/db/password",
            "overwrite": true,
            "tags": null,
            "tier": "Standard",
            "type": "SecureString",
            "value": "kEzDLgW",
            "version": 1
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.kong.aws_kms_alias.kong",
            "module.kong.aws_kms_key.kong",
            "module.kong.random_string.db_password"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_ssm_parameter",
      "name": "ee-admin-token",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allowed_pattern": "",
            "arn": "arn:aws:ssm:me-south-1:0000000000:parameter/kong/build/ee/admin/token",
            "description": "",
            "id": "/kong/build/ee/admin/token",
            "key_id": "arn:aws:kms:me-south-1:000000000:key/6659978977a1",
            "name": "/kong/build/ee/admin/token",
            "overwrite": null,
            "tags": null,
            "tier": "Standard",
            "type": "SecureString",
            "value": "fJ4000000wrc",
            "version": 1
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.kong.aws_kms_alias.kong",
            "module.kong.aws_kms_key.kong",
            "module.kong.random_string.admin_token"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_ssm_parameter",
      "name": "ee-bintray-auth",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allowed_pattern": "",
            "arn": "arn:aws:ssm:me-south-1:0000000000:parameter/kong/build/ee/bintray-auth",
            "description": "",
            "id": "/kong/build/ee/bintray-auth",
            "key_id": "arn:aws:kms:me-south-1:00000000:key/665124808899",
            "name": "/kong/build/ee/bintray-auth",
            "overwrite": null,
            "tags": null,
            "tier": "Standard",
            "type": "SecureString",
            "value": "BinTray credentials",
            "version": 1
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.kong.aws_kms_alias.kong",
            "module.kong.aws_kms_key.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "aws_ssm_parameter",
      "name": "ee-license",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allowed_pattern": "",
            "arn": "arn:aws:ssm:me-south-1:00000000000:parameter/kong/build/ee/license",
            "description": "",
            "id": "/kong/build/ee/license",
            "key_id": "arn:aws:kms:me-south-1:0000000000:key/66512a1",
            "name": "/kong/build/ee/license",
            "overwrite": null,
            "tags": null,
            "tier": "Standard",
            "type": "SecureString",
            "value": "{\"license\":{""}}}",
            "version": 1
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.kong.aws_kms_alias.kong",
            "module.kong.aws_kms_key.kong"
          ]
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "random_string",
      "name": "admin_token",
      "provider": "provider.random",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "jMWKq6",
            "keepers": null,
            "length": 32,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "NxOjMWKq6",
            "special": false,
            "upper": true
          },
          "private": "IjEifQ=="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "random_string",
      "name": "db_password",
      "provider": "provider.random",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "JeEzDLgW",
            "keepers": null,
            "length": 32,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "EzDLgW",
            "special": false,
            "upper": true
          },
          "private": "jEifQ=="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "random_string",
      "name": "master_password",
      "provider": "provider.random",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "dOmqx1rM8",
            "keepers": null,
            "length": 32,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "mqx1rM8",
            "special": false,
            "upper": true
          },
          "private": "iI6IjEifQ=="
        }
      ]
    },
    {
      "module": "module.kong",
      "mode": "managed",
      "type": "random_string",
      "name": "session_secret",
      "provider": "provider.random",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "Wbu8EHxf2sOp",
            "keepers": null,
            "length": 32,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "Hxf2sOp",
            "special": false,
            "upper": true
          },
          "private": "lvbiI6IjEifQ=="
        }
      ]
    }
  ]
}